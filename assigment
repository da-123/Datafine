a. Setup following web application deployment: NGINX as reverse proxy for uWSGI app server, PostgreSQL and Django
# Installing the Packages from the Ubuntu Repositories ,If you are using Django with Python 3, type:
    sudo apt update
    sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl
#Django 1.11 is the last release of Django that will support Python 2. 
#If you are starting new projects, it is strongly recommended that you choose Python 3. 
#If you still need to use Python 2, type:
    sudo apt update
    sudo apt install python-pip python-dev libpq-dev postgresql postgresql-contrib nginx curl
#Creating the PostgreSQL Database and User
#Log into an interactive Postgres session by typing:
    sudo -u postgres psql
#You will be given a PostgreSQL prompt where we can set up our requirements.
# First, create a database for your project  
  postgres=  CREATE DATABASE app1;
# Next, create a database user for our project. Make sure to select a secure password:
   postgres=#CREATE USER dan WITH PASSWORD 'Root@321';
   postgres=#ALTER ROLE dan SET client_encoding TO 'utf8';
   postgres=#ALTER ROLE dan SET default_transaction_isolation TO 'read committed';
   postgres=#ALTER ROLE dan SET timezone TO 'UTC';
   postgres=#GRANT ALL PRIVILEGES ON DATABASE app1 TO dan;
   postgres=#\q;
 #Creating a Python Virtual Environment for your Project
 #To do this, we first need access to the virtualenv command. We can install this with pip.
    sudo -H pip3 install --upgrade pip
    sudo -H pip3 install virtualenv
 #With virtualenv installed, we can start forming our project. Create and move into a directory where we can keep our project files:
    mkdir ~/myprojectdir
    cd ~/myprojectdir
#Within the project directory, create a Python virtual environment by typing:
  virtualenv myprojectenv
# Before we install our project’s Python requirements, we need to activate the virtual environment. You can do that by typing:
  source myprojectenv/bin/activate
#With your virtual environment active, install Django, Gunicorn, and the psycopg2 PostgreSQL adaptor with the local instance of pip:
  (myprojectenv)$ :pip install django gunicorn psycopg2-binary
 #Creating and Configuring a New Django Project
 (myprojectenv)$: django-admin.py startproject myproject ~/myprojectdir
# Adjusting the Project Settings
(myprojectenv)$: nano ~/myprojectdir/myproject/settings.py
# Note: Be sure to include localhost as one of the options since we will be proxying connections through a local Nginx instance.
   # The simplest case: just add the domain name(s) and IP addresses of your Django server
   # ALLOWED_HOSTS = [ 'example.com', '203.0.113.5']
   # To respond to 'example.com' and any subdomains, start the domain with a dot
   # ALLOWED_HOSTS = ['.example.com', '203.0.113.5']
   ALLOWED_HOSTS = ['IP', 'second_domain_or_IP', . . ., 'localhost']
Next, find the section that configures database access. It will start with DATABASES. The configuration in the file is for a SQLite database.
We already created a PostgreSQL database for our project, so we need to adjust the settings.  
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'app1',
        'USER': 'dan',
        'PASSWORD': 'Root@123#',
        'HOST': 'localhost',
        'PORT': '',
    }
}
This is necessary so that Nginx can handle requests for these items.
The following line tells Django to place them in a directory called static in the base project directory:
   STATIC_URL = '/static/'
   STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
 # Completing Initial Project Setup
 # we can migrate the initial database schema to our PostgreSQL database using the management script
    (myprojectenv)$: ~/myprojectdir/manage.py makemigrations
    (myprojectenv)$:~/myprojectdir/manage.py migrate
 # Create an administrative user for the project by typing:
    (myprojectenv)$:~/myprojectdir/manage.py createsuperuser
 #collect all of the static content into the directory location
   (myprojectenv)$: ~/myprojectdir/manage.py collectstatic
 #starting up the Django development server 
   (myprojectenv)$: ~/myprojectdir/manage.py runserver 0.0.0.0:8000
 #your web browser, visit your server’s domain name or IP address followed by :8000
   http://server_domain_or_IP:8000
  #Testing Gunicorn’s Ability to Serve the Project
     (myprojectenv)$:  cd ~/myprojectdir
     (myprojectenv)$:   gunicorn --bind 0.0.0.0:8000 myproject.wsgi
   #We’re now finished configuring our Django application. We can back out of our virtual environment by typing
    (myprojectenv)$:deactivate
   #Creating systemd Socket and Service Files for Gunicorn
     sudo nano /etc/systemd/system/gunicorn.socket
   # we will create a [Unit] section to describe the socket, a [Socket] section to define the socket location, and an [Install] section to make sure the socket is created at the right time
          [Unit]
          Description=gunicorn socket
          [Socket]
          ListenStream=/run/gunicorn.sock
          [Install]
          WantedBy=sockets.target
     # Save and close the file.
      sudo nano /etc/systemd/system/gunicorn.service
      [Unit]
      Description=gunicorn daemon
      Requires=gunicorn.socket
      After=network.target
      [Service]
      User=dan
      Group=www-data
      WorkingDirectory=/home/dan/myprojectdir
      ExecStart=/home/dan/myprojectdir/myprojectenv/bin/gunicorn \
          --access-logfile - \
          --workers 3 \
          --bind unix:/run/gunicorn.sock \
          myproject.wsgi:application
      [Install]
      WantedBy=multi-user.target
      # Save and close 
      # We can now start and enable the Gunicorn socket
         sudo systemctl enable gunicorn.socket
         sudo systemctl enable gunicorn.socket
       #Testing Socket Activation
         sudo systemctl status gunicorn
       #Configure Nginx to Proxy Pass to Gunicorn after installing nginx service
         sudo nano /etc/nginx/sites-available/myproject
      # We will start by specifying that this block should listen on the normal port 80 and 
      #that it should respond to our server’s domain name or IP address:
         server {
       listen 80;
       server_name server_domain_or_IP;
            }
       location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/dan/myprojectdir;
        }
      }
      location / {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn.sock;
      }
    }
    
    #save and close the file when you are finished
    sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled
    sudo nginx -t
    sudo systemctl restart nginx
  # The Final step would be Testing if the cofiguration is working accordingly.
